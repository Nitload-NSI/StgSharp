; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	report:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__9C03CD75_concurrencysal@h DB 01H
__CA64BAF1_sal@h DB 01H
__95655E73_vadefs@h DB 01H
__1D560A45_vcruntime@h DB 01H
__F214EFBF_excpt@h DB 01H
__D9B78EDA_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__7061C667_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__BF933BA7_framework@h DB 01H
__ED683015_stdint@h DB 01H
__C8DE3B32_khrplatform@h DB 01H
__A8399BEE_glad@h DB 01H
__13F5961F_stddef@h DB 01H
__62B253DE_glfw3@h DB 01H
__11E77DD3_mmintrin@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FA77ED4C_malloc@h DB 01H
__9D836611_xmmintrin@h DB 01H
__F8E1EFDD_emmintrin@h DB 01H
__27408754_pmmintrin@h DB 01H
__9799F4D6_tmmintrin@h DB 01H
__BEA2E155_smmintrin@h DB 01H
__DBC06899_nmmintrin@h DB 01H
__0E7B92D7_wmmintrin@h DB 01H
__C5EFDFD0_zmmintrin@h DB 01H
__F2FB7D1A_immintrin@h DB 01H
__BF9E0B0A_StgSharpGraphic@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__2A2E7809_mat3@c DB 01H
msvcjmc	ENDS
PUBLIC	transpose3to2
PUBLIC	transpose3to3
PUBLIC	transpose3to4
PUBLIC	det_mat3
PUBLIC	det_mat3_internal
PUBLIC	__JustMyCode_Default
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	defaultVecPtr:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to2 DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$transpose3to2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to3 DD imagerel $LN3
	DD	imagerel $LN3+333
	DD	imagerel $unwind$transpose3to3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to4 DD imagerel $LN3
	DD	imagerel $LN3+362
	DD	imagerel $unwind$transpose3to4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$det_mat3 DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$det_mat3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$det_mat3_internal DD imagerel $LN3
	DD	imagerel $LN3+261
	DD	imagerel $unwind$det_mat3_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$det_mat3_internal DD 025041c01H
	DD	0117231cH
	DD	05010001aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$det_mat3 DD 025041201H
	DD	010d2312H
	DD	050060012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to4 DD 025041701H
	DD	01122317H
	DD	0500b0014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to3 DD 025041701H
	DD	01122317H
	DD	0500b0014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to2 DD 025031701H
	DD	0f2122317H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\内核开源发布\StgShqrpGraphic\mat3.c
;	COMDAT det_mat3_internal
_TEXT	SEGMENT
addc1$ = 0
addc2$ = 16
subc1$ = 32
subc2$ = 48
cache$ = 64
sub$ = 80
ret$ = 96
c0$ = 192
c1$ = 200
c2$ = 208
det_mat3_internal PROC					; COMDAT

; 40   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2A2E7809_mat3@c
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 41   : 
; 42   :     //let adding row aligned
; 43   :     __m128 addc1 = _mm_shuffle_ps(c1, c1, _MM_SHUFFLE(3, 0, 2, 1));

  00028	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  0002f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR c1$[rbp]
  00036	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00039	0f c6 01 c9	 shufps	 xmm0, XMMWORD PTR [rcx], 201 ; 000000c9H
  0003d	0f 29 45 00	 movaps	 XMMWORD PTR addc1$[rbp], xmm0

; 44   :     __m128 addc2 = _mm_shuffle_ps(c2, c2, _MM_SHUFFLE(3, 1, 0, 2));

  00041	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  00048	48 8b 8d d0 00
	00 00		 mov	 rcx, QWORD PTR c2$[rbp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00052	0f c6 01 d2	 shufps	 xmm0, XMMWORD PTR [rcx], 210 ; 000000d2H
  00056	0f 29 45 10	 movaps	 XMMWORD PTR addc2$[rbp], xmm0

; 45   : 
; 46   :     //let sub row aligned
; 47   :     __m128 subc1 = _mm_shuffle_ps(c1, c1, _MM_SHUFFLE(3, 1, 0, 2));

  0005a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  00061	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR c1$[rbp]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0006b	0f c6 01 d2	 shufps	 xmm0, XMMWORD PTR [rcx], 210 ; 000000d2H
  0006f	0f 29 45 20	 movaps	 XMMWORD PTR subc1$[rbp], xmm0

; 48   :     __m128 subc2 = _mm_shuffle_ps(c2, c2, _MM_SHUFFLE(3, 0, 2, 1));

  00073	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  0007a	48 8b 8d d0 00
	00 00		 mov	 rcx, QWORD PTR c2$[rbp]
  00081	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00084	0f c6 01 c9	 shufps	 xmm0, XMMWORD PTR [rcx], 201 ; 000000c9H
  00088	0f 29 45 30	 movaps	 XMMWORD PTR subc2$[rbp], xmm0

; 49   : 
; 50   :     //multple all add row
; 51   :     __m128 cache = _mm_mul_ps(c0,addc1);

  0008c	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR c0$[rbp]
  00093	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00096	0f 59 45 00	 mulps	 xmm0, XMMWORD PTR addc1$[rbp]
  0009a	0f 29 45 40	 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 52   :     cache = _mm_mul_ps(cache,addc2);

  0009e	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  000a2	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR addc2$[rbp]
  000a6	0f 29 45 40	 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 53   : 
; 54   :     //multiple all sub row
; 55   :     __m128 sub = _mm_mul_ps(c0, subc1);

  000aa	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR c0$[rbp]
  000b1	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b4	0f 59 45 20	 mulps	 xmm0, XMMWORD PTR subc1$[rbp]
  000b8	0f 29 45 50	 movaps	 XMMWORD PTR sub$[rbp], xmm0

; 56   :     sub = _mm_mul_ps(sub, subc2);

  000bc	0f 28 45 50	 movaps	 xmm0, XMMWORD PTR sub$[rbp]
  000c0	0f 59 45 30	 mulps	 xmm0, XMMWORD PTR subc2$[rbp]
  000c4	0f 29 45 50	 movaps	 XMMWORD PTR sub$[rbp], xmm0

; 57   : 
; 58   :     //main-corner sub sub-corner
; 59   :     cache = _mm_sub_ps(cache,sub);

  000c8	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  000cc	0f 5c 45 50	 subps	 xmm0, XMMWORD PTR sub$[rbp]
  000d0	0f 29 45 40	 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 60   : 
; 61   :     __m128 ret = _mm_hadd_ps(cache,cache);    //element 1 add element 2

  000d4	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  000d8	f2 0f 7c 45 40	 haddps	 xmm0, XMMWORD PTR cache$[rbp]
  000dd	0f 29 45 60	 movaps	 XMMWORD PTR ret$[rbp], xmm0

; 62   :     ret = _mm_add_ps(ret, cache);    //(e1 add e2) add element 3

  000e1	0f 28 45 60	 movaps	 xmm0, XMMWORD PTR ret$[rbp]
  000e5	0f 58 45 40	 addps	 xmm0, XMMWORD PTR cache$[rbp]
  000e9	0f 29 45 60	 movaps	 XMMWORD PTR ret$[rbp], xmm0

; 63   : 
; 64   : 
; 65   :     return ret.m128_f32[2];

  000ed	b8 04 00 00 00	 mov	 eax, 4
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f3 0f 10 44 05
	60		 movss	 xmm0, DWORD PTR ret$[rbp+rax]

; 66   : }

  000fc	48 8d a5 b0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+176]
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
det_mat3_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\内核开源发布\StgShqrpGraphic\mat3.c
;	COMDAT det_mat3
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
mat$ = 128
det_mat3 PROC						; COMDAT

; 69   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2A2E7809_mat3@c
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 70   :     return det_mat3_internal(

  0001e	b8 10 00 00 00	 mov	 eax, 16
  00023	48 6b c0 02	 imul	 rax, rax, 2
  00027	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  0002e	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  00032	0f 11 45 60	 movups	 XMMWORD PTR $T3[rbp], xmm0
  00036	b8 10 00 00 00	 mov	 eax, 16
  0003b	48 6b c0 01	 imul	 rax, rax, 1
  0003f	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  00046	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  0004a	0f 11 45 50	 movups	 XMMWORD PTR $T2[rbp], xmm0
  0004e	b8 10 00 00 00	 mov	 eax, 16
  00053	48 6b c0 00	 imul	 rax, rax, 0
  00057	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  0005e	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  00062	0f 11 45 40	 movups	 XMMWORD PTR $T1[rbp], xmm0
  00066	4c 8d 45 60	 lea	 r8, QWORD PTR $T3[rbp]
  0006a	48 8d 55 50	 lea	 rdx, QWORD PTR $T2[rbp]
  0006e	48 8d 4d 40	 lea	 rcx, QWORD PTR $T1[rbp]
  00072	e8 00 00 00 00	 call	 det_mat3_internal

; 71   :         mat->colum[0],
; 72   :         mat->colum[1],
; 73   :         mat->colum[2]
; 74   :     );
; 75   : }

  00077	48 8d 65 70	 lea	 rsp, QWORD PTR [rbp+112]
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
det_mat3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\内核开源发布\StgShqrpGraphic\mat3.c
;	COMDAT transpose3to4
_TEXT	SEGMENT
t0$ = 0
t1$ = 16
t2$ = 32
t3$ = 48
source$ = 144
target$ = 152
transpose3to4 PROC					; COMDAT

; 27   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2A2E7809_mat3@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 28   :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(1, 0, 1, 0));

  00023	b8 10 00 00 00	 mov	 eax, 16
  00028	48 6b c0 01	 imul	 rax, rax, 1
  0002c	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00033	48 03 c8	 add	 rcx, rax
  00036	48 8b c1	 mov	 rax, rcx
  00039	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0003c	b8 10 00 00 00	 mov	 eax, 16
  00041	48 6b c0 00	 imul	 rax, rax, 0
  00045	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0004c	48 03 c8	 add	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00055	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	0f 29 45 00	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 29   :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(3, 2, 3, 2));

  00060	b8 10 00 00 00	 mov	 eax, 16
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00070	48 03 c8	 add	 rcx, rax
  00073	48 8b c1	 mov	 rax, rcx
  00076	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00079	b8 10 00 00 00	 mov	 eax, 16
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00089	48 03 c8	 add	 rcx, rax
  0008c	48 8b c1	 mov	 rax, rcx
  0008f	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00092	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  00096	0f 28 c1	 movaps	 xmm0, xmm1
  00099	0f 29 45 10	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 30   :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->colum[2]), *defaultVecPtr, _MM_SHUFFLE(1, 0, 1, 0));

  0009d	b8 10 00 00 00	 mov	 eax, 16
  000a2	48 6b c0 02	 imul	 rax, rax, 2
  000a6	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000ad	48 03 c8	 add	 rcx, rax
  000b0	48 8b c1	 mov	 rax, rcx
  000b3	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR defaultVecPtr
  000bd	0f c6 00 44	 shufps	 xmm0, XMMWORD PTR [rax], 68 ; 00000044H
  000c1	0f 29 45 20	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 31   :     __m128 t3 = _mm_shuffle_ps(ALIGN(source->colum[2]), *defaultVecPtr, _MM_SHUFFLE(3, 2, 3, 2));

  000c5	b8 10 00 00 00	 mov	 eax, 16
  000ca	48 6b c0 02	 imul	 rax, rax, 2
  000ce	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000d5	48 03 c8	 add	 rcx, rax
  000d8	48 8b c1	 mov	 rax, rcx
  000db	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR defaultVecPtr
  000e5	0f c6 00 ee	 shufps	 xmm0, XMMWORD PTR [rax], 238 ; 000000eeH
  000e9	0f 29 45 30	 movaps	 XMMWORD PTR t3$[rbp], xmm0

; 32   : 
; 33   :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  000ed	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  000f1	0f c6 45 20 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  000f6	b8 10 00 00 00	 mov	 eax, 16
  000fb	48 6b c0 00	 imul	 rax, rax, 0
  000ff	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00106	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 34   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  0010a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  0010e	0f c6 45 20 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  00113	b8 10 00 00 00	 mov	 eax, 16
  00118	48 6b c0 01	 imul	 rax, rax, 1
  0011c	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00123	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 35   :     target->colum[2] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(2, 0, 2, 0));

  00127	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  0012b	0f c6 45 30 88	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 136 ; 00000088H
  00130	b8 10 00 00 00	 mov	 eax, 16
  00135	48 6b c0 02	 imul	 rax, rax, 2
  00139	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00140	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 36   :     target->colum[3] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(3, 1, 3, 1));

  00144	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  00148	0f c6 45 30 dd	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 221 ; 000000ddH
  0014d	b8 10 00 00 00	 mov	 eax, 16
  00152	48 6b c0 03	 imul	 rax, rax, 3
  00156	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  0015d	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 37   : }

  00161	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  00168	5d		 pop	 rbp
  00169	c3		 ret	 0
transpose3to4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\内核开源发布\StgShqrpGraphic\mat3.c
;	COMDAT transpose3to3
_TEXT	SEGMENT
t0$ = 0
t1$ = 16
t2$ = 32
t3$ = 48
source$ = 144
target$ = 152
transpose3to3 PROC					; COMDAT

; 14   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2A2E7809_mat3@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 15   :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(1, 0, 1, 0));

  00023	b8 10 00 00 00	 mov	 eax, 16
  00028	48 6b c0 01	 imul	 rax, rax, 1
  0002c	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00033	48 03 c8	 add	 rcx, rax
  00036	48 8b c1	 mov	 rax, rcx
  00039	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0003c	b8 10 00 00 00	 mov	 eax, 16
  00041	48 6b c0 00	 imul	 rax, rax, 0
  00045	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0004c	48 03 c8	 add	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00055	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	0f 29 45 00	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 16   :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(3, 2, 3, 2));

  00060	b8 10 00 00 00	 mov	 eax, 16
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00070	48 03 c8	 add	 rcx, rax
  00073	48 8b c1	 mov	 rax, rcx
  00076	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00079	b8 10 00 00 00	 mov	 eax, 16
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00089	48 03 c8	 add	 rcx, rax
  0008c	48 8b c1	 mov	 rax, rcx
  0008f	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00092	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  00096	0f 28 c1	 movaps	 xmm0, xmm1
  00099	0f 29 45 10	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 17   :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->colum[2]), *defaultVecPtr, _MM_SHUFFLE(1, 0, 1, 0));

  0009d	b8 10 00 00 00	 mov	 eax, 16
  000a2	48 6b c0 02	 imul	 rax, rax, 2
  000a6	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000ad	48 03 c8	 add	 rcx, rax
  000b0	48 8b c1	 mov	 rax, rcx
  000b3	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR defaultVecPtr
  000bd	0f c6 00 44	 shufps	 xmm0, XMMWORD PTR [rax], 68 ; 00000044H
  000c1	0f 29 45 20	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 18   :     __m128 t3 = _mm_shuffle_ps(ALIGN(source->colum[2]), *defaultVecPtr, _MM_SHUFFLE(3, 2, 3, 2));

  000c5	b8 10 00 00 00	 mov	 eax, 16
  000ca	48 6b c0 02	 imul	 rax, rax, 2
  000ce	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000d5	48 03 c8	 add	 rcx, rax
  000d8	48 8b c1	 mov	 rax, rcx
  000db	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR defaultVecPtr
  000e5	0f c6 00 ee	 shufps	 xmm0, XMMWORD PTR [rax], 238 ; 000000eeH
  000e9	0f 29 45 30	 movaps	 XMMWORD PTR t3$[rbp], xmm0

; 19   : 
; 20   :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  000ed	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  000f1	0f c6 45 20 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  000f6	b8 10 00 00 00	 mov	 eax, 16
  000fb	48 6b c0 00	 imul	 rax, rax, 0
  000ff	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00106	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 21   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  0010a	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  0010e	0f c6 45 20 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  00113	b8 10 00 00 00	 mov	 eax, 16
  00118	48 6b c0 01	 imul	 rax, rax, 1
  0011c	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00123	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 22   :     target->colum[2] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(2, 0, 2, 0));

  00127	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  0012b	0f c6 45 30 88	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 136 ; 00000088H
  00130	b8 10 00 00 00	 mov	 eax, 16
  00135	48 6b c0 02	 imul	 rax, rax, 2
  00139	48 8b 8d 98 00
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00140	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 23   : }

  00144	48 8d a5 80 00
	00 00		 lea	 rsp, QWORD PTR [rbp+128]
  0014b	5d		 pop	 rbp
  0014c	c3		 ret	 0
transpose3to3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\内核开源发布\StgShqrpGraphic\mat3.c
;	COMDAT transpose3to2
_TEXT	SEGMENT
t0$ = 0
t2$ = 16
source$ = 112
target$ = 120
transpose3to2 PROC					; COMDAT

; 5    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2A2E7809_mat3@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(1, 0, 1, 0));

  00023	b8 10 00 00 00	 mov	 eax, 16
  00028	48 6b c0 01	 imul	 rax, rax, 1
  0002c	48 8b 4d 70	 mov	 rcx, QWORD PTR source$[rbp]
  00030	48 03 c8	 add	 rcx, rax
  00033	48 8b c1	 mov	 rax, rcx
  00036	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00039	b8 10 00 00 00	 mov	 eax, 16
  0003e	48 6b c0 00	 imul	 rax, rax, 0
  00042	48 8b 4d 70	 mov	 rcx, QWORD PTR source$[rbp]
  00046	48 03 c8	 add	 rcx, rax
  00049	48 8b c1	 mov	 rax, rcx
  0004c	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  0004f	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00053	0f 28 c1	 movaps	 xmm0, xmm1
  00056	0f 29 45 00	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 7    :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->colum[2]), *defaultVecPtr, _MM_SHUFFLE(1, 0, 1, 0));

  0005a	b8 10 00 00 00	 mov	 eax, 16
  0005f	48 6b c0 02	 imul	 rax, rax, 2
  00063	48 8b 4d 70	 mov	 rcx, QWORD PTR source$[rbp]
  00067	48 03 c8	 add	 rcx, rax
  0006a	48 8b c1	 mov	 rax, rcx
  0006d	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR defaultVecPtr
  00077	0f c6 00 44	 shufps	 xmm0, XMMWORD PTR [rax], 68 ; 00000044H
  0007b	0f 29 45 10	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 8    : 
; 9    :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  0007f	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  00083	0f c6 45 10 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  00088	b8 10 00 00 00	 mov	 eax, 16
  0008d	48 6b c0 00	 imul	 rax, rax, 0
  00091	48 8b 4d 78	 mov	 rcx, QWORD PTR target$[rbp]
  00095	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 10   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  00099	0f 28 45 00	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  0009d	0f c6 45 10 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  000a2	b8 10 00 00 00	 mov	 eax, 16
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	48 8b 4d 78	 mov	 rcx, QWORD PTR target$[rbp]
  000af	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 11   : }

  000b3	48 8d 65 60	 lea	 rsp, QWORD PTR [rbp+96]
  000b7	5d		 pop	 rbp
  000b8	c3		 ret	 0
transpose3to2 ENDP
_TEXT	ENDS
END
