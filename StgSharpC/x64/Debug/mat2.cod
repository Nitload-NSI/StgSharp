; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33523.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	infolog:BYTE:0200H
_DATA	ENDS
msvcjmc	SEGMENT
__A19B9DB6_ssgc_framework@h DB 01H
__5BC5AF51_mmintrin@h DB 01H
__4B783B3C_concurrencysal@h DB 01H
__137BB1BE_sal@h DB 01H
__805F4069_vadefs@h DB 01H
__1EAACA9B_vcruntime@h DB 01H
__1B0272D9_corecrt@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FA77ED4C_malloc@h DB 01H
__9E7FA6CF_xmmintrin@h DB 01H
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__1227BCE2_excpt@h DB 01H
__CC8D90C0_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__0504B279_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__61B03275_ssgc_internal@h DB 01H
__F8522E0F_stdint@h DB 01H
__874AB8BA_khrplatform@h DB 01H
__8DCB230D_gl@h DB 01H
__5F89FF5A_wgl@h DB 01H
__13F5961F_stddef@h DB 01H
__B47D1049_glfw3@h DB 01H
__FB1D2F03_emmintrin@h DB 01H
__24BC478A_pmmintrin@h DB 01H
__94653408_tmmintrin@h DB 01H
__BD5E218B_smmintrin@h DB 01H
__D83CA847_nmmintrin@h DB 01H
__0D875209_wmmintrin@h DB 01H
__C6131F0E_zmmintrin@h DB 01H
__F107BDC4_immintrin@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__46240030_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__5274102E_stb_image@h DB 01H
__CE2BBC10_StgSharpC@h DB 01H
__54E5184D_mat2@c DB 01H
msvcjmc	ENDS
PUBLIC	transpose2to3
PUBLIC	transpose2to4
PUBLIC	deinit_mat2
PUBLIC	__JustMyCode_Default
EXTRN	__imp__aligned_free:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose2to3 DD imagerel $LN3
	DD	imagerel $LN3+270
	DD	imagerel $unwind$transpose2to3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose2to4 DD imagerel $LN3
	DD	imagerel $LN3+304
	DD	imagerel $unwind$transpose2to4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deinit_mat2 DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$deinit_mat2
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deinit_mat2 DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose2to4 DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose2to3 DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat2.c
;	COMDAT deinit_mat2
_TEXT	SEGMENT
mat$ = 224
deinit_mat2 PROC					; COMDAT

; 26   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__54E5184D_mat2@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 27   :     _aligned_free(mat);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_free

; 28   : }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
deinit_mat2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat2.c
;	COMDAT transpose2to4
_TEXT	SEGMENT
t0$ = 16
t1$ = 64
source$ = 320
target$ = 328
transpose2to4 PROC					; COMDAT

; 15   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__54E5184D_mat2@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 16   :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(1, 0, 1, 0));

  00024	b8 10 00 00 00	 mov	 eax, 16
  00029	48 6b c0 01	 imul	 rax, rax, 1
  0002d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0003d	b8 10 00 00 00	 mov	 eax, 16
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00056	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  0005a	0f 28 c1	 movaps	 xmm0, xmm1
  0005d	0f 29 45 10	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 17   :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(3, 2, 3, 2));

  00061	b8 10 00 00 00	 mov	 eax, 16
  00066	48 6b c0 01	 imul	 rax, rax, 1
  0006a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0007a	b8 10 00 00 00	 mov	 eax, 16
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00093	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  00097	0f 28 c1	 movaps	 xmm0, xmm1
  0009a	0f 29 45 40	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 18   : 
; 19   :     target->colum[0] = _mm_shuffle_ps(t0, zeroVec, _MM_SHUFFLE(2, 0, 2, 0));

  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR t0$[rbp]
  000a5	0f c6 c8 88	 shufps	 xmm1, xmm0, 136		; 00000088H
  000a9	0f 28 c1	 movaps	 xmm0, xmm1
  000ac	b8 10 00 00 00	 mov	 eax, 16
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  000bc	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 20   :     target->colum[1] = _mm_shuffle_ps(t0, zeroVec, _MM_SHUFFLE(3, 1, 3, 1));

  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR t0$[rbp]
  000c7	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000cb	0f 28 c1	 movaps	 xmm0, xmm1
  000ce	b8 10 00 00 00	 mov	 eax, 16
  000d3	48 6b c0 01	 imul	 rax, rax, 1
  000d7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  000de	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 21   :     target->colum[2] = _mm_shuffle_ps(t1, zeroVec, _MM_SHUFFLE(2, 0, 2, 0));

  000e2	0f 57 c0	 xorps	 xmm0, xmm0
  000e5	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR t1$[rbp]
  000e9	0f c6 c8 88	 shufps	 xmm1, xmm0, 136		; 00000088H
  000ed	0f 28 c1	 movaps	 xmm0, xmm1
  000f0	b8 10 00 00 00	 mov	 eax, 16
  000f5	48 6b c0 02	 imul	 rax, rax, 2
  000f9	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00100	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 22   :     target->colum[3] = _mm_shuffle_ps(t1, zeroVec, _MM_SHUFFLE(3, 1, 3, 1));

  00104	0f 57 c0	 xorps	 xmm0, xmm0
  00107	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR t1$[rbp]
  0010b	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  0010f	0f 28 c1	 movaps	 xmm0, xmm1
  00112	b8 10 00 00 00	 mov	 eax, 16
  00117	48 6b c0 03	 imul	 rax, rax, 3
  0011b	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00122	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 23   : }

  00126	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0012d	5f		 pop	 rdi
  0012e	5d		 pop	 rbp
  0012f	c3		 ret	 0
transpose2to4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat2.c
;	COMDAT transpose2to3
_TEXT	SEGMENT
t0$ = 16
t1$ = 64
source$ = 320
target$ = 328
transpose2to3 PROC					; COMDAT

; 5    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__54E5184D_mat2@c
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 6    :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(1, 0, 1, 0));

  00024	b8 10 00 00 00	 mov	 eax, 16
  00029	48 6b c0 01	 imul	 rax, rax, 1
  0002d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0003d	b8 10 00 00 00	 mov	 eax, 16
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00056	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  0005a	0f 28 c1	 movaps	 xmm0, xmm1
  0005d	0f 29 45 10	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 7    :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->colum[0]), ALIGN(source->colum[1]), _MM_SHUFFLE(3, 2, 3, 2));

  00061	b8 10 00 00 00	 mov	 eax, 16
  00066	48 6b c0 01	 imul	 rax, rax, 1
  0006a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0007a	b8 10 00 00 00	 mov	 eax, 16
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  00093	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  00097	0f 28 c1	 movaps	 xmm0, xmm1
  0009a	0f 29 45 40	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 8    : 
; 9    :     target->colum[0] = _mm_shuffle_ps(t0, zeroVec, _MM_SHUFFLE(2, 0, 2, 0));

  0009e	0f 57 c0	 xorps	 xmm0, xmm0
  000a1	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR t0$[rbp]
  000a5	0f c6 c8 88	 shufps	 xmm1, xmm0, 136		; 00000088H
  000a9	0f 28 c1	 movaps	 xmm0, xmm1
  000ac	b8 10 00 00 00	 mov	 eax, 16
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  000bc	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 10   :     target->colum[1] = _mm_shuffle_ps(t0, zeroVec, _MM_SHUFFLE(3, 1, 3, 1));

  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	0f 28 4d 10	 movaps	 xmm1, XMMWORD PTR t0$[rbp]
  000c7	0f c6 c8 dd	 shufps	 xmm1, xmm0, 221		; 000000ddH
  000cb	0f 28 c1	 movaps	 xmm0, xmm1
  000ce	b8 10 00 00 00	 mov	 eax, 16
  000d3	48 6b c0 01	 imul	 rax, rax, 1
  000d7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  000de	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 11   :     target->colum[2] = _mm_shuffle_ps(t1, zeroVec, _MM_SHUFFLE(2, 0, 2, 0));

  000e2	0f 57 c0	 xorps	 xmm0, xmm0
  000e5	0f 28 4d 40	 movaps	 xmm1, XMMWORD PTR t1$[rbp]
  000e9	0f c6 c8 88	 shufps	 xmm1, xmm0, 136		; 00000088H
  000ed	0f 28 c1	 movaps	 xmm0, xmm1
  000f0	b8 10 00 00 00	 mov	 eax, 16
  000f5	48 6b c0 02	 imul	 rax, rax, 2
  000f9	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  00100	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 12   : }

  00104	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0010b	5f		 pop	 rdi
  0010c	5d		 pop	 rbp
  0010d	c3		 ret	 0
transpose2to3 ENDP
_TEXT	ENDS
END
