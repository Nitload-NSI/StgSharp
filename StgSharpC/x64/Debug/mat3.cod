; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33519.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	infolog:BYTE:0200H
_DATA	ENDS
msvcjmc	SEGMENT
__0ED14FEE_winpackagefamily@h DB 01H
__F92EF742_winapifamily@h DB 01H
__22E515EB_sdkddkver@h DB 01H
__4B783B3C_concurrencysal@h DB 01H
__137BB1BE_sal@h DB 01H
__805F4069_vadefs@h DB 01H
__1EAACA9B_vcruntime@h DB 01H
__1227BCE2_excpt@h DB 01H
__CC8D90C0_stdarg@h DB 01H
__29F49F40_specstrings_undef@h DB 01H
__D0F42932_specstrings_strict@h DB 01H
__F00405FD_sdv_driverspecs@h DB 01H
__173E09CA_driverspecs@h DB 01H
__9A452361_specstrings@h DB 01H
__1B0272D9_corecrt@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__98517906_kernelspecs@h DB 01H
__D3497022_basetsd@h DB 01H
__61CC25A1_errno@h DB 01H
__0504B279_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__7FCB5136_guiddef@h DB 01H
__FF8A9E11_pshpack4@h DB 01H
__D5438902_poppack@h DB 01H
__FB07E2A3_pshpack2@h DB 01H
__F6906775_pshpack8@h DB 01H
__F9415CFA_pshpack1@h DB 01H
__E58C6F1C_apiset@h DB 01H
__A5C52262_ktmtypes@h DB 01H
__FBBA8F9D_winnt@h DB 01H
__A32D3D2C_minwindef@h DB 01H
__7D798299_windef@h DB 01H
__9AE108E9_apisetcconv@h DB 01H
__9CE53D2C_minwinbase@h DB 01H
__5D0AA210_apiquery2@h DB 01H
__4DD4E726_processenv@h DB 01H
__3575CC96_fileapi@h DB 01H
__8EA220E6_fileapifromapp@h DB 01H
__BF9B31FE_debugapi@h DB 01H
__C3AFE134_utilapiset@h DB 01H
__76F69E51_handleapi@h DB 01H
__7E63D784_errhandlingapi@h DB 01H
__FFA7003C_fibersapi@h DB 01H
__8971CECF_namedpipeapi@h DB 01H
__46C9D8A6_profileapi@h DB 01H
__98D4F0A3_heapapi@h DB 01H
__50EF2A88_ioapiset@h DB 01H
__92EA1464_synchapi@h DB 01H
__A53D8AED_interlockedapi@h DB 01H
__B506CAAF_processthreadsapi@h DB 01H
__FF735694_sysinfoapi@h DB 01H
__29589789_memoryapi@h DB 01H
__E9C7A663_enclaveapi@h DB 01H
__D035F9F7_threadpoollegacyapiset@h DB 01H
__C899130C_threadpoolapiset@h DB 01H
__E0441EE7_jobapi@h DB 01H
__CEF86838_jobapi2@h DB 01H
__35AC6B9A_wow64apiset@h DB 01H
__C8AE41A5_libloaderapi@h DB 01H
__CC9E232D_securitybaseapi@h DB 01H
__C9D0C9B8_namespaceapi@h DB 01H
__30FF9CAD_systemtopologyapi@h DB 01H
__4D358795_processtopologyapi@h DB 01H
__40446D10_securityappcontainer@h DB 01H
__3A952EDF_realtimeapiset@h DB 01H
__F4865F4B_winerror@h DB 01H
__53C1BD93_timezoneapi@h DB 01H
__1FFBEDBF_winbase@h DB 01H
__43D3FA34_wingdi@h DB 01H
__D24A7391_tvout@h DB 01H
__7713A6C8_winuser@h DB 01H
__0B345F71_datetimeapi@h DB 01H
__9AC6960C_winnls@h DB 01H
__973A40A8_stringapiset@h DB 01H
__CC46FEE2_wincontypes@h DB 01H
__97D70BE1_consoleapi@h DB 01H
__27EC5E18_consoleapi2@h DB 01H
__262E342F_consoleapi3@h DB 01H
__641DCD70_wincon@h DB 01H
__5A96C7A7_verrsrc@h DB 01H
__B69C6FF2_winver@h DB 01H
__7AEB8C37_reason@h DB 01H
__59F1A8A9_winreg@h DB 01H
__EE0E2B7F_wnnc@h DB 01H
__DCDB7054_winnetwk@h DB 01H
__81DDEDE3_stralign@h DB 01H
__2134D1B4_winsvc@h DB 01H
__11C07376_mcx@h DB 01H
__577CE3E7_ime_cmodes@h DB 01H
__1E72C31E_imm@h DB 01H
__E15BF856_windows@h DB 01H
__A19B9DB6_ssgc_framework@h DB 01H
__5BC5AF51_mmintrin@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FA77ED4C_malloc@h DB 01H
__9E7FA6CF_xmmintrin@h DB 01H
__61B03275_ssgc_internal@h DB 01H
__F8522E0F_stdint@h DB 01H
__874AB8BA_khrplatform@h DB 01H
__8DCB230D_gl@h DB 01H
__5F89FF5A_wgl@h DB 01H
__13F5961F_stddef@h DB 01H
__B47D1049_glfw3@h DB 01H
__FB1D2F03_emmintrin@h DB 01H
__24BC478A_pmmintrin@h DB 01H
__94653408_tmmintrin@h DB 01H
__BD5E218B_smmintrin@h DB 01H
__D83CA847_nmmintrin@h DB 01H
__0D875209_wmmintrin@h DB 01H
__C6131F0E_zmmintrin@h DB 01H
__F107BDC4_immintrin@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__46240030_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__5274102E_stb_image@h DB 01H
__CE2BBC10_StgSharpC@h DB 01H
__5527727A_mat3@c DB 01H
msvcjmc	ENDS
PUBLIC	transpose3to2
PUBLIC	transpose3to3
PUBLIC	transpose3to4
PUBLIC	det_mat3
PUBLIC	det_mat3_internal
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to2 DD imagerel $LN3
	DD	imagerel $LN3+296
	DD	imagerel $unwind$transpose3to2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to3 DD imagerel $LN3
	DD	imagerel $LN3+521
	DD	imagerel $unwind$transpose3to3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$transpose3to4 DD imagerel $LN3
	DD	imagerel $LN3+553
	DD	imagerel $unwind$transpose3to4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$det_mat3 DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$det_mat3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$det_mat3_internal DD imagerel $LN3
	DD	imagerel $LN3+370
	DD	imagerel $unwind$det_mat3_internal
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$det_mat3_internal DD 035053601H
	DD	0118331dH
	DD	070110049H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
det_mat3_internal$rtcName$0 DB 072H
	DB	065H
	DB	074H
	DB	00H
	ORG $+12
det_mat3_internal$rtcVarDesc DD 0160H
	DD	010H
	DQ	FLAT:det_mat3_internal$rtcName$0
	ORG $+48
det_mat3_internal$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:det_mat3_internal$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$det_mat3 DD 035051301H
	DD	010e3313H
	DD	070070031H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	0210H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to4 DD 025052919H
	DD	01132318H
	DD	0700c0041H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	01f8H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	01f0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to3 DD 025052919H
	DD	01132318H
	DD	0700c0041H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	01f8H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	010fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$transpose3to2 DD 025052919H
	DD	01132318H
	DD	0700c002fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat3.c
;	COMDAT det_mat3_internal
_TEXT	SEGMENT
addc1$ = 16
addc2$ = 64
subc1$ = 112
subc2$ = 160
cache$ = 208
sub$ = 256
ret$ = 304
c0$ = 560
c1$ = 568
c2$ = 576
det_mat3_internal PROC					; COMDAT

; 40   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5527727A_mat3@c
  0003d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 41   :     //let adding row aligned
; 42   :     __m128 addc1 = _mm_shuffle_ps(c1, c1, _MM_SHUFFLE(3, 0, 2, 1));

  00042	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  00049	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR c1$[rbp]
  00050	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00053	0f c6 01 c9	 shufps	 xmm0, XMMWORD PTR [rcx], 201 ; 000000c9H
  00057	0f 29 45 10	 movaps	 XMMWORD PTR addc1$[rbp], xmm0

; 43   :     __m128 addc2 = _mm_shuffle_ps(c2, c2, _MM_SHUFFLE(3, 1, 0, 2));

  0005b	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  00062	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR c2$[rbp]
  00069	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0006c	0f c6 01 d2	 shufps	 xmm0, XMMWORD PTR [rcx], 210 ; 000000d2H
  00070	0f 29 45 40	 movaps	 XMMWORD PTR addc2$[rbp], xmm0

; 44   : 
; 45   :     //let sub row aligned
; 46   :     __m128 subc1 = _mm_shuffle_ps(c1, c1, _MM_SHUFFLE(3, 1, 0, 2));

  00074	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  0007b	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR c1$[rbp]
  00082	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00085	0f c6 01 d2	 shufps	 xmm0, XMMWORD PTR [rcx], 210 ; 000000d2H
  00089	0f 29 45 70	 movaps	 XMMWORD PTR subc1$[rbp], xmm0

; 47   :     __m128 subc2 = _mm_shuffle_ps(c2, c2, _MM_SHUFFLE(3, 0, 2, 1));

  0008d	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  00094	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR c2$[rbp]
  0009b	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0009e	0f c6 01 c9	 shufps	 xmm0, XMMWORD PTR [rcx], 201 ; 000000c9H
  000a2	0f 29 85 a0 00
	00 00		 movaps	 XMMWORD PTR subc2$[rbp], xmm0

; 48   : 
; 49   :     //multple all add row
; 50   :     __m128 cache = _mm_mul_ps(c0, addc1);

  000a9	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR c0$[rbp]
  000b0	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000b3	0f 59 45 10	 mulps	 xmm0, XMMWORD PTR addc1$[rbp]
  000b7	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 51   :     cache = _mm_mul_ps(cache, addc2);

  000be	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  000c5	0f 59 45 40	 mulps	 xmm0, XMMWORD PTR addc2$[rbp]
  000c9	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 52   : 
; 53   :     //multiple all sub row
; 54   :     __m128 sub = _mm_mul_ps(c0, subc1);

  000d0	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR c0$[rbp]
  000d7	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000da	0f 59 45 70	 mulps	 xmm0, XMMWORD PTR subc1$[rbp]
  000de	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR sub$[rbp], xmm0

; 55   :     sub = _mm_mul_ps(sub, subc2);

  000e5	0f 28 85 00 01
	00 00		 movaps	 xmm0, XMMWORD PTR sub$[rbp]
  000ec	0f 59 85 a0 00
	00 00		 mulps	 xmm0, XMMWORD PTR subc2$[rbp]
  000f3	0f 29 85 00 01
	00 00		 movaps	 XMMWORD PTR sub$[rbp], xmm0

; 56   : 
; 57   :     //main-corner sub sub-corner
; 58   :     cache = _mm_sub_ps(cache, sub);

  000fa	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  00101	0f 5c 85 00 01
	00 00		 subps	 xmm0, XMMWORD PTR sub$[rbp]
  00108	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR cache$[rbp], xmm0

; 59   : 
; 60   :     __m128 ret = _mm_hadd_ps(cache, cache);    //element 1 add element 2

  0010f	0f 28 85 d0 00
	00 00		 movaps	 xmm0, XMMWORD PTR cache$[rbp]
  00116	f2 0f 7c 85 d0
	00 00 00	 haddps	 xmm0, XMMWORD PTR cache$[rbp]
  0011e	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR ret$[rbp], xmm0

; 61   :     ret = _mm_add_ps(ret, cache);    //(e1 add e2) add element 3

  00125	0f 28 85 30 01
	00 00		 movaps	 xmm0, XMMWORD PTR ret$[rbp]
  0012c	0f 58 85 d0 00
	00 00		 addps	 xmm0, XMMWORD PTR cache$[rbp]
  00133	0f 29 85 30 01
	00 00		 movaps	 XMMWORD PTR ret$[rbp], xmm0

; 62   : 
; 63   :     return ret.m128_f32[2];

  0013a	b8 04 00 00 00	 mov	 eax, 4
  0013f	48 6b c0 02	 imul	 rax, rax, 2
  00143	f3 0f 10 84 05
	30 01 00 00	 movss	 xmm0, DWORD PTR ret$[rbp+rax]

; 64   : }

  0014c	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00152	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:det_mat3_internal$rtcFrameData
  0015d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00162	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  00168	48 8d a5 18 02
	00 00		 lea	 rsp, QWORD PTR [rbp+536]
  0016f	5f		 pop	 rdi
  00170	5d		 pop	 rbp
  00171	c3		 ret	 0
det_mat3_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat3.c
;	COMDAT det_mat3
_TEXT	SEGMENT
$T1 = 208
$T2 = 256
$T3 = 304
mat$ = 368
det_mat3 PROC						; COMDAT

; 67   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5527727A_mat3@c
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 68   :     return det_mat3_internal(

  0001f	b8 10 00 00 00	 mov	 eax, 16
  00024	48 6b c0 02	 imul	 rax, rax, 2
  00028	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  0002f	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  00033	0f 11 85 30 01
	00 00		 movups	 XMMWORD PTR $T3[rbp], xmm0
  0003a	b8 10 00 00 00	 mov	 eax, 16
  0003f	48 6b c0 01	 imul	 rax, rax, 1
  00043	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  0004a	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  0004e	0f 11 85 00 01
	00 00		 movups	 XMMWORD PTR $T2[rbp], xmm0
  00055	b8 10 00 00 00	 mov	 eax, 16
  0005a	48 6b c0 00	 imul	 rax, rax, 0
  0005e	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR mat$[rbp]
  00065	0f 10 04 01	 movups	 xmm0, XMMWORD PTR [rcx+rax]
  00069	0f 11 85 d0 00
	00 00		 movups	 XMMWORD PTR $T1[rbp], xmm0
  00070	4c 8d 85 30 01
	00 00		 lea	 r8, QWORD PTR $T3[rbp]
  00077	48 8d 95 00 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  0007e	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00085	e8 00 00 00 00	 call	 det_mat3_internal

; 69   :         mat->colum[0],
; 70   :         mat->colum[1],
; 71   :         mat->colum[2]
; 72   :     );
; 73   : }

  0008a	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
det_mat3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat3.c
;	COMDAT transpose3to4
_TEXT	SEGMENT
t0$ = 16
t1$ = 64
t2$ = 112
$S4$ = 160
t3$ = 208
$S5$ = 256
__$ArrayPad$ = 472
source$ = 512
target$ = 520
transpose3to4 PROC					; COMDAT

; 27   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c5	 xor	 rax, rbp
  00022	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5527727A_mat3@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 28   :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->m[0][0]), ALIGN(source->m[0][1]), _MM_SHUFFLE(1, 0, 1, 0));

  00035	b8 0c 00 00 00	 mov	 eax, 12
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00045	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	48 6b c9 01	 imul	 rcx, rcx, 1
  00053	48 03 c1	 add	 rax, rcx
  00056	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00059	b8 0c 00 00 00	 mov	 eax, 12
  0005e	48 6b c0 00	 imul	 rax, rax, 0
  00062	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00069	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	48 6b c9 00	 imul	 rcx, rcx, 0
  00077	48 03 c1	 add	 rax, rcx
  0007a	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  0007d	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	0f 29 45 10	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 29   :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->m[0][0]), ALIGN(source->m[0][1]), _MM_SHUFFLE(3, 2, 3, 2));

  00088	b8 0c 00 00 00	 mov	 eax, 12
  0008d	48 6b c0 00	 imul	 rax, rax, 0
  00091	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00098	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	48 6b c9 01	 imul	 rcx, rcx, 1
  000a6	48 03 c1	 add	 rax, rcx
  000a9	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000ac	b8 0c 00 00 00	 mov	 eax, 12
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000bc	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	48 6b c9 00	 imul	 rcx, rcx, 0
  000ca	48 03 c1	 add	 rax, rcx
  000cd	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  000d0	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  000d4	0f 28 c1	 movaps	 xmm0, xmm1
  000d7	0f 29 45 40	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 30   :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->m[0][2]), zeroVec, _MM_SHUFFLE(1, 0, 1, 0));

  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 a0
	00 00 00	 movss	 DWORD PTR $S4$[rbp], xmm0
  000e6	0f 57 c0	 xorps	 xmm0, xmm0
  000e9	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR $S4$[rbp+4], xmm0
  000f1	0f 57 c0	 xorps	 xmm0, xmm0
  000f4	f3 0f 11 85 a8
	00 00 00	 movss	 DWORD PTR $S4$[rbp+8], xmm0
  000fc	0f 57 c0	 xorps	 xmm0, xmm0
  000ff	f3 0f 11 85 ac
	00 00 00	 movss	 DWORD PTR $S4$[rbp+12], xmm0
  00107	b8 0c 00 00 00	 mov	 eax, 12
  0010c	48 6b c0 00	 imul	 rax, rax, 0
  00110	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00117	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0011c	b9 04 00 00 00	 mov	 ecx, 4
  00121	48 6b c9 02	 imul	 rcx, rcx, 2
  00125	48 03 c1	 add	 rax, rcx
  00128	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0012b	0f c6 85 a0 00
	00 00 44	 shufps	 xmm0, XMMWORD PTR $S4$[rbp], 68 ; 00000044H
  00133	0f 29 45 70	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 31   :     __m128 t3 = _mm_shuffle_ps(ALIGN(source->m[0][2]), zeroVec, _MM_SHUFFLE(3, 2, 3, 2));

  00137	0f 57 c0	 xorps	 xmm0, xmm0
  0013a	f3 0f 11 85 00
	01 00 00	 movss	 DWORD PTR $S5$[rbp], xmm0
  00142	0f 57 c0	 xorps	 xmm0, xmm0
  00145	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR $S5$[rbp+4], xmm0
  0014d	0f 57 c0	 xorps	 xmm0, xmm0
  00150	f3 0f 11 85 08
	01 00 00	 movss	 DWORD PTR $S5$[rbp+8], xmm0
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 85 0c
	01 00 00	 movss	 DWORD PTR $S5$[rbp+12], xmm0
  00163	b8 0c 00 00 00	 mov	 eax, 12
  00168	48 6b c0 00	 imul	 rax, rax, 0
  0016c	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00173	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  00178	b9 04 00 00 00	 mov	 ecx, 4
  0017d	48 6b c9 02	 imul	 rcx, rcx, 2
  00181	48 03 c1	 add	 rax, rcx
  00184	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00187	0f c6 85 00 01
	00 00 ee	 shufps	 xmm0, XMMWORD PTR $S5$[rbp], 238 ; 000000eeH
  0018f	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR t3$[rbp], xmm0

; 32   : 
; 33   :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  00196	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  0019a	0f c6 45 70 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  0019f	b8 10 00 00 00	 mov	 eax, 16
  001a4	48 6b c0 00	 imul	 rax, rax, 0
  001a8	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001af	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 34   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  001b3	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  001b7	0f c6 45 70 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  001bc	b8 10 00 00 00	 mov	 eax, 16
  001c1	48 6b c0 01	 imul	 rax, rax, 1
  001c5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001cc	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 35   :     target->colum[2] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(2, 0, 2, 0));

  001d0	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  001d4	0f c6 85 d0 00
	00 00 88	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 136 ; 00000088H
  001dc	b8 10 00 00 00	 mov	 eax, 16
  001e1	48 6b c0 02	 imul	 rax, rax, 2
  001e5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001ec	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 36   :     target->colum[3] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(3, 1, 3, 1));

  001f0	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  001f4	0f c6 85 d0 00
	00 00 dd	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 221 ; 000000ddH
  001fc	b8 10 00 00 00	 mov	 eax, 16
  00201	48 6b c0 03	 imul	 rax, rax, 3
  00205	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  0020c	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 37   : }

  00210	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00217	48 33 cd	 xor	 rcx, rbp
  0021a	e8 00 00 00 00	 call	 __security_check_cookie
  0021f	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00226	5f		 pop	 rdi
  00227	5d		 pop	 rbp
  00228	c3		 ret	 0
transpose3to4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat3.c
;	COMDAT transpose3to3
_TEXT	SEGMENT
t0$ = 16
t1$ = 64
t2$ = 112
$S2$ = 160
t3$ = 208
$S3$ = 256
__$ArrayPad$ = 472
source$ = 512
target$ = 520
transpose3to3 PROC					; COMDAT

; 15   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c5	 xor	 rax, rbp
  00022	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5527727A_mat3@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 16   :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->m[0][0]), ALIGN(source->m[0][1]), _MM_SHUFFLE(1, 0, 1, 0));

  00035	b8 0c 00 00 00	 mov	 eax, 12
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00045	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	48 6b c9 01	 imul	 rcx, rcx, 1
  00053	48 03 c1	 add	 rax, rcx
  00056	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00059	b8 0c 00 00 00	 mov	 eax, 12
  0005e	48 6b c0 00	 imul	 rax, rax, 0
  00062	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00069	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	48 6b c9 00	 imul	 rcx, rcx, 0
  00077	48 03 c1	 add	 rax, rcx
  0007a	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  0007d	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	0f 29 45 10	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 17   :     __m128 t1 = _mm_shuffle_ps(ALIGN(source->m[0][0]), ALIGN(source->m[0][1]), _MM_SHUFFLE(3, 2, 3, 2));

  00088	b8 0c 00 00 00	 mov	 eax, 12
  0008d	48 6b c0 00	 imul	 rax, rax, 0
  00091	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00098	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	48 6b c9 01	 imul	 rcx, rcx, 1
  000a6	48 03 c1	 add	 rax, rcx
  000a9	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000ac	b8 0c 00 00 00	 mov	 eax, 12
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000bc	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	48 6b c9 00	 imul	 rcx, rcx, 0
  000ca	48 03 c1	 add	 rax, rcx
  000cd	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  000d0	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  000d4	0f 28 c1	 movaps	 xmm0, xmm1
  000d7	0f 29 45 40	 movaps	 XMMWORD PTR t1$[rbp], xmm0

; 18   :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->m[0][2]), zeroVec, _MM_SHUFFLE(1, 0, 1, 0));

  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 a0
	00 00 00	 movss	 DWORD PTR $S2$[rbp], xmm0
  000e6	0f 57 c0	 xorps	 xmm0, xmm0
  000e9	f3 0f 11 85 a4
	00 00 00	 movss	 DWORD PTR $S2$[rbp+4], xmm0
  000f1	0f 57 c0	 xorps	 xmm0, xmm0
  000f4	f3 0f 11 85 a8
	00 00 00	 movss	 DWORD PTR $S2$[rbp+8], xmm0
  000fc	0f 57 c0	 xorps	 xmm0, xmm0
  000ff	f3 0f 11 85 ac
	00 00 00	 movss	 DWORD PTR $S2$[rbp+12], xmm0
  00107	b8 0c 00 00 00	 mov	 eax, 12
  0010c	48 6b c0 00	 imul	 rax, rax, 0
  00110	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00117	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0011c	b9 04 00 00 00	 mov	 ecx, 4
  00121	48 6b c9 02	 imul	 rcx, rcx, 2
  00125	48 03 c1	 add	 rax, rcx
  00128	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0012b	0f c6 85 a0 00
	00 00 44	 shufps	 xmm0, XMMWORD PTR $S2$[rbp], 68 ; 00000044H
  00133	0f 29 45 70	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 19   :     __m128 t3 = _mm_shuffle_ps(ALIGN(source->m[0][2]), zeroVec, _MM_SHUFFLE(3, 2, 3, 2));

  00137	0f 57 c0	 xorps	 xmm0, xmm0
  0013a	f3 0f 11 85 00
	01 00 00	 movss	 DWORD PTR $S3$[rbp], xmm0
  00142	0f 57 c0	 xorps	 xmm0, xmm0
  00145	f3 0f 11 85 04
	01 00 00	 movss	 DWORD PTR $S3$[rbp+4], xmm0
  0014d	0f 57 c0	 xorps	 xmm0, xmm0
  00150	f3 0f 11 85 08
	01 00 00	 movss	 DWORD PTR $S3$[rbp+8], xmm0
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 85 0c
	01 00 00	 movss	 DWORD PTR $S3$[rbp+12], xmm0
  00163	b8 0c 00 00 00	 mov	 eax, 12
  00168	48 6b c0 00	 imul	 rax, rax, 0
  0016c	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00173	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  00178	b9 04 00 00 00	 mov	 ecx, 4
  0017d	48 6b c9 02	 imul	 rcx, rcx, 2
  00181	48 03 c1	 add	 rax, rcx
  00184	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00187	0f c6 85 00 01
	00 00 ee	 shufps	 xmm0, XMMWORD PTR $S3$[rbp], 238 ; 000000eeH
  0018f	0f 29 85 d0 00
	00 00		 movaps	 XMMWORD PTR t3$[rbp], xmm0

; 20   : 
; 21   :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  00196	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  0019a	0f c6 45 70 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  0019f	b8 10 00 00 00	 mov	 eax, 16
  001a4	48 6b c0 00	 imul	 rax, rax, 0
  001a8	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001af	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 22   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  001b3	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  001b7	0f c6 45 70 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  001bc	b8 10 00 00 00	 mov	 eax, 16
  001c1	48 6b c0 01	 imul	 rax, rax, 1
  001c5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001cc	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 23   :     target->colum[2] = _mm_shuffle_ps(t1, t3, _MM_SHUFFLE(2, 0, 2, 0));

  001d0	0f 28 45 40	 movaps	 xmm0, XMMWORD PTR t1$[rbp]
  001d4	0f c6 85 d0 00
	00 00 88	 shufps	 xmm0, XMMWORD PTR t3$[rbp], 136 ; 00000088H
  001dc	b8 10 00 00 00	 mov	 eax, 16
  001e1	48 6b c0 02	 imul	 rax, rax, 2
  001e5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  001ec	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 24   : }

  001f0	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001f7	48 33 cd	 xor	 rcx, rbp
  001fa	e8 00 00 00 00	 call	 __security_check_cookie
  001ff	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00206	5f		 pop	 rdi
  00207	5d		 pop	 rbp
  00208	c3		 ret	 0
transpose3to3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\NitloadIndustry\研究项目\1-Flagship\TH2020\ProjectFile\源代码\StgSharpC\mat3.c
;	COMDAT transpose3to2
_TEXT	SEGMENT
t0$ = 16
t2$ = 64
$S1$ = 112
__$ArrayPad$ = 328
source$ = 368
target$ = 376
transpose3to2 PROC					; COMDAT

; 6    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c5	 xor	 rax, rbp
  00022	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5527727A_mat3@c
  00030	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 7    :     __m128 t0 = _mm_shuffle_ps(ALIGN(source->m[0][0]), ALIGN(source->m[0][1]), _MM_SHUFFLE(1, 0, 1, 0));

  00035	b8 0c 00 00 00	 mov	 eax, 12
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00045	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	48 6b c9 01	 imul	 rcx, rcx, 1
  00053	48 03 c1	 add	 rax, rcx
  00056	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00059	b8 0c 00 00 00	 mov	 eax, 12
  0005e	48 6b c0 00	 imul	 rax, rax, 0
  00062	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00069	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	48 6b c9 00	 imul	 rcx, rcx, 0
  00077	48 03 c1	 add	 rax, rcx
  0007a	0f 10 08	 movups	 xmm1, XMMWORD PTR [rax]
  0007d	0f c6 c8 44	 shufps	 xmm1, xmm0, 68		; 00000044H
  00081	0f 28 c1	 movaps	 xmm0, xmm1
  00084	0f 29 45 10	 movaps	 XMMWORD PTR t0$[rbp], xmm0

; 8    :     __m128 t2 = _mm_shuffle_ps(ALIGN(source->m[0][2]), zeroVec, _MM_SHUFFLE(1, 0, 1, 0));

  00088	0f 57 c0	 xorps	 xmm0, xmm0
  0008b	f3 0f 11 45 70	 movss	 DWORD PTR $S1$[rbp], xmm0
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 11 45 74	 movss	 DWORD PTR $S1$[rbp+4], xmm0
  00098	0f 57 c0	 xorps	 xmm0, xmm0
  0009b	f3 0f 11 45 78	 movss	 DWORD PTR $S1$[rbp+8], xmm0
  000a0	0f 57 c0	 xorps	 xmm0, xmm0
  000a3	f3 0f 11 45 7c	 movss	 DWORD PTR $S1$[rbp+12], xmm0
  000a8	b8 0c 00 00 00	 mov	 eax, 12
  000ad	48 6b c0 00	 imul	 rax, rax, 0
  000b1	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000b8	48 8d 44 01 30	 lea	 rax, QWORD PTR [rcx+rax+48]
  000bd	b9 04 00 00 00	 mov	 ecx, 4
  000c2	48 6b c9 02	 imul	 rcx, rcx, 2
  000c6	48 03 c1	 add	 rax, rcx
  000c9	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000cc	0f c6 45 70 44	 shufps	 xmm0, XMMWORD PTR $S1$[rbp], 68 ; 00000044H
  000d1	0f 29 45 40	 movaps	 XMMWORD PTR t2$[rbp], xmm0

; 9    : 
; 10   :     target->colum[0] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(2, 0, 2, 0));

  000d5	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  000d9	0f c6 45 40 88	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 136 ; 00000088H
  000de	b8 10 00 00 00	 mov	 eax, 16
  000e3	48 6b c0 00	 imul	 rax, rax, 0
  000e7	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  000ee	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 11   :     target->colum[1] = _mm_shuffle_ps(t0, t2, _MM_SHUFFLE(3, 1, 3, 1));

  000f2	0f 28 45 10	 movaps	 xmm0, XMMWORD PTR t0$[rbp]
  000f6	0f c6 45 40 dd	 shufps	 xmm0, XMMWORD PTR t2$[rbp], 221 ; 000000ddH
  000fb	b8 10 00 00 00	 mov	 eax, 16
  00100	48 6b c0 01	 imul	 rax, rax, 1
  00104	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR target$[rbp]
  0010b	0f 11 04 01	 movups	 XMMWORD PTR [rcx+rax], xmm0

; 12   : }

  0010f	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00116	48 33 cd	 xor	 rcx, rbp
  00119	e8 00 00 00 00	 call	 __security_check_cookie
  0011e	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00125	5f		 pop	 rdi
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
transpose3to2 ENDP
_TEXT	ENDS
END
